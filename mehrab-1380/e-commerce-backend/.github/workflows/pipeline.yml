name: Deploy to Amazon ECS

on:
  push:
    branches: [ production ]

env:
  ECR_REPOSITORY: rss-backend           # set this to your Amazon ECR repository name
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
permissions:
  contents: read

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build With Maven
      run: mvn -B package --file pom.xml
      env:
        LOCALEMAIL: ${{secrets.LOCALEMAIL}}
        EMAILPASSWORD: ${{secrets.EMAILPASSWORD}}

    - name: Stage JAR
      run: mkdir staging && cp target/*.jar staging

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Package
        path: staging

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: set up ssh identity file
      run: echo "${{ secrets.ssh_key }}" > key.pem && chmod 400 key.pem

    - name: send ssh command to server
      run: ssh -i "key.pem" ${{ secrets.ec2backend }} -o "StrictHostKeyChecking no" "~/scripts/run_backend"
      #Yes, I know turning off the strict host check is unsafe, but after spending a few hours trying to 
      # get the key from the server, using several different methods, and into the known_hosts file
      # I just want to get something that works. I think the only really unsafe part might be a MITM gets
      # my key.pem but I am unsure if that's a real issue.
